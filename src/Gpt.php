<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK;

/**
 * Gpt - OpenAI API: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * 
 * @package Openai\SDK
 * @access public
 */
class Gpt
{
	public const SERVERS = [
		'https://api.openai.com/v1',
	];
  	
    /**
     * Build Assistants that can call models and use tools.
     * 
     * @var Assistants $$assistants
     */
	public Assistants $assistants;
	
    /**
     * Learn how to turn audio into text or text into audio.
     * 
     * @var Audio $$audio
     */
	public Audio $audio;
	
    /**
     * Given a list of messages comprising a conversation, the model will return a response.
     * 
     * @var Chat $$chat
     */
	public Chat $chat;
	
    /**
     * Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
     * 
     * @var Completions $$completions
     */
	public Completions $completions;
	
    /**
     * Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
     * 
     * @var Embeddings $$embeddings
     */
	public Embeddings $embeddings;
	
    /**
     * Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
     * 
     * @var Files $$files
     */
	public Files $files;
	
    /**
     * Manage fine-tuning jobs to tailor a model to your specific training data.
     * 
     * @var FineTuning $$fineTuning
     */
	public FineTuning $fineTuning;
	
    /**
     * Given a prompt and/or an input image, the model will generate a new image.
     * 
     * @var Images $$images
     */
	public Images $images;
	
    /**
     * List and describe the various models available in the API.
     * 
     * @var Models $$models
     */
	public Models $models;
	
    /**
     * Given a input text, outputs if the model classifies it as violating OpenAI's content policy.
     * 
     * @var Moderations $$moderations
     */
	public Moderations $moderations;
		
	private SDKConfiguration $sdkConfiguration;

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return GptBuilder
	 */
	public static function builder(): GptBuilder
	{
		return new GptBuilder();
	}

	/**
	 * @param SDKConfiguration $sdkConfiguration
	 */
	public function __construct(SDKConfiguration $sdkConfiguration)
	{
		$this->sdkConfiguration = $sdkConfiguration;
		
		$this->assistants = new Assistants($this->sdkConfiguration);
		
		$this->audio = new Audio($this->sdkConfiguration);
		
		$this->chat = new Chat($this->sdkConfiguration);
		
		$this->completions = new Completions($this->sdkConfiguration);
		
		$this->embeddings = new Embeddings($this->sdkConfiguration);
		
		$this->files = new Files($this->sdkConfiguration);
		
		$this->fineTuning = new FineTuning($this->sdkConfiguration);
		
		$this->images = new Images($this->sdkConfiguration);
		
		$this->models = new Models($this->sdkConfiguration);
		
		$this->moderations = new Moderations($this->sdkConfiguration);
	}
}