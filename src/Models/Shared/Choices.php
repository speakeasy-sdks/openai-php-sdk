<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK\Models\Shared;


class Choices
{
    /**
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
     * 
     * `length` if the maximum number of tokens specified in the request was reached,
     * `content_filter` if content was omitted due to a flag from our content filters,
     * `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
     * 
     * 
     * @var \Openai\SDK\Models\Shared\FinishReason $finishReason
     */
	#[\JMS\Serializer\Annotation\SerializedName('finish_reason')]
    #[\JMS\Serializer\Annotation\Type('enum<Openai\SDK\Models\Shared\FinishReason>')]
    public FinishReason $finishReason;
    
    /**
     * The index of the choice in the list of choices.
     * 
     * @var int $index
     */
	#[\JMS\Serializer\Annotation\SerializedName('index')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $index;
    
    /**
     * Log probability information for the choice.
     * 
     * @var \Openai\SDK\Models\Shared\Logprobs $logprobs
     */
	#[\JMS\Serializer\Annotation\SerializedName('logprobs')]
    #[\JMS\Serializer\Annotation\Type('Openai\SDK\Models\Shared\Logprobs')]
    public Logprobs $logprobs;
    
    /**
     * A chat completion message generated by the model.
     * 
     * @var \Openai\SDK\Models\Shared\ChatCompletionResponseMessage $message
     */
	#[\JMS\Serializer\Annotation\SerializedName('message')]
    #[\JMS\Serializer\Annotation\Type('Openai\SDK\Models\Shared\ChatCompletionResponseMessage')]
    public ChatCompletionResponseMessage $message;
    
	public function __construct()
	{
		$this->finishReason = \Openai\SDK\Models\Shared\FinishReason::Stop;
		$this->index = 0;
		$this->logprobs = new \Openai\SDK\Models\Shared\Logprobs();
		$this->message = new \Openai\SDK\Models\Shared\ChatCompletionResponseMessage();
	}
}
