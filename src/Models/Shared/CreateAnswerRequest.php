<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK\Models\Shared;


class CreateAnswerRequest
{
    /**
     * List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.
     * 
     * 
     * You should specify either `documents` or a `file`, but not both.
     * 
     * 
     * @var ?array<string> $documents
     */
	#[\JMS\Serializer\Annotation\SerializedName('documents')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $documents = null;
    
    /**
     * List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
     * 
     * @var array<array<string>> $examples
     */
	#[\JMS\Serializer\Annotation\SerializedName('examples')]
    #[\JMS\Serializer\Annotation\Type('array<array<string>>')]
    public array $examples;
    
    /**
     * A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
     * 
     * @var string $examplesContext
     */
	#[\JMS\Serializer\Annotation\SerializedName('examples_context')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $examplesContext;
    
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     * 
     * @var ?array<mixed> $expand
     */
	#[\JMS\Serializer\Annotation\SerializedName('expand')]
    #[\JMS\Serializer\Annotation\Type('array<mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $expand = null;
    
    /**
     * The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
     * 
     * 
     * You should specify either `documents` or a `file`, but not both.
     * 
     * 
     * @var ?string $file
     */
	#[\JMS\Serializer\Annotation\SerializedName('file')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $file = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('logit_bias')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $logitBias = null;
    
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
     * 
     * 
     * The maximum value for `logprobs` is 5.
     * 
     * When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
     * 
     * 
     * @var ?int $logprobs
     */
	#[\JMS\Serializer\Annotation\SerializedName('logprobs')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $logprobs = null;
    
    /**
     * The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     * 
     * @var ?int $maxRerank
     */
	#[\JMS\Serializer\Annotation\SerializedName('max_rerank')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxRerank = null;
    
    /**
     * The maximum number of tokens allowed for the generated answer
     * 
     * @var ?int $maxTokens
     */
	#[\JMS\Serializer\Annotation\SerializedName('max_tokens')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxTokens = null;
    
    /**
     * ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     * 
     * @var string $model
     */
	#[\JMS\Serializer\Annotation\SerializedName('model')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $model;
    
    /**
     * How many answers to generate for each question.
     * 
     * @var ?int $n
     */
	#[\JMS\Serializer\Annotation\SerializedName('n')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $n = null;
    
    /**
     * Question to get answered.
     * 
     * @var string $question
     */
	#[\JMS\Serializer\Annotation\SerializedName('question')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $question;
    
	#[\JMS\Serializer\Annotation\SerializedName('return_metadata')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $returnMetadata = null;
    
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     * 
     * @var ?bool $returnPrompt
     */
	#[\JMS\Serializer\Annotation\SerializedName('return_prompt')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $returnPrompt = null;
    
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     * 
     * @var ?string $searchModel
     */
	#[\JMS\Serializer\Annotation\SerializedName('search_model')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $searchModel = null;
    
    /**
     * completions_stop_description
     * 
     * @var mixed $stop
     */
	#[\JMS\Serializer\Annotation\SerializedName('stop')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $stop = null;
    
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * @var ?float $temperature
     */
	#[\JMS\Serializer\Annotation\SerializedName('temperature')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $temperature = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $user = null;
    
	public function __construct()
	{
		$this->documents = null;
		$this->examples = [];
		$this->examplesContext = "";
		$this->expand = null;
		$this->file = null;
		$this->logitBias = null;
		$this->logprobs = null;
		$this->maxRerank = null;
		$this->maxTokens = null;
		$this->model = "";
		$this->n = null;
		$this->question = "";
		$this->returnMetadata = null;
		$this->returnPrompt = null;
		$this->searchModel = null;
		$this->stop = null;
		$this->temperature = null;
		$this->user = null;
	}
}
