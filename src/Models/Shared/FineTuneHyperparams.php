<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK\Models\Shared;


/**
 * FineTuneHyperparams - The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
 * 
 * @package Openai\SDK\Models\Shared
 * @access public
 */
class FineTuneHyperparams
{
    /**
     * The batch size to use for training. The batch size is the number of
     * 
     * training examples used to train a single forward and backward pass.
     * 
     * 
     * @var int $batchSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('batch_size')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $batchSize;
    
    /**
     * The number of classes to use for computing classification metrics.
     * 
     * 
     * 
     * @var ?int $classificationNClasses
     */
	#[\JMS\Serializer\Annotation\SerializedName('classification_n_classes')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $classificationNClasses = null;
    
    /**
     * The positive class to use for computing classification metrics.
     * 
     * 
     * 
     * @var ?string $classificationPositiveClass
     */
	#[\JMS\Serializer\Annotation\SerializedName('classification_positive_class')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $classificationPositiveClass = null;
    
    /**
     * The classification metrics to compute using the validation dataset at the end of every epoch.
     * 
     * 
     * 
     * @var ?bool $computeClassificationMetrics
     */
	#[\JMS\Serializer\Annotation\SerializedName('compute_classification_metrics')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $computeClassificationMetrics = null;
    
    /**
     * The learning rate multiplier to use for training.
     * 
     * 
     * 
     * @var float $learningRateMultiplier
     */
	#[\JMS\Serializer\Annotation\SerializedName('learning_rate_multiplier')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $learningRateMultiplier;
    
    /**
     * The number of epochs to train the model for. An epoch refers to one
     * 
     * full cycle through the training dataset.
     * 
     * 
     * @var int $nEpochs
     */
	#[\JMS\Serializer\Annotation\SerializedName('n_epochs')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $nEpochs;
    
    /**
     * The weight to use for loss on the prompt tokens.
     * 
     * 
     * 
     * @var float $promptLossWeight
     */
	#[\JMS\Serializer\Annotation\SerializedName('prompt_loss_weight')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $promptLossWeight;
    
	public function __construct()
	{
		$this->batchSize = 0;
		$this->classificationNClasses = null;
		$this->classificationPositiveClass = null;
		$this->computeClassificationMetrics = null;
		$this->learningRateMultiplier = 0;
		$this->nEpochs = 0;
		$this->promptLossWeight = 0;
	}
}
