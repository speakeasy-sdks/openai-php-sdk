<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK\Models\Operations;

use \Openai\SDK\Utils\SpeakeasyMetadata;
class ListMessagesRequest
{
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     * 
     * 
     * 
     * @var ?string $after
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=after')]
    public ?string $after = null;
    
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     * 
     * 
     * 
     * @var ?string $before
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=before')]
    public ?string $before = null;
    
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     * 
     * 
     * 
     * @var ?int $limit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?int $limit = null;
    
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     * 
     * 
     * 
     * @var ?\Openai\SDK\Models\Operations\ListMessagesQueryParamOrder $order
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=order')]
    public ?ListMessagesQueryParamOrder $order = null;
    
    /**
     * The ID of the [thread](/docs/api-reference/threads) the messages belong to.
     * 
     * @var string $threadId
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=thread_id')]
    public string $threadId;
    
	public function __construct()
	{
		$this->after = null;
		$this->before = null;
		$this->limit = null;
		$this->order = null;
		$this->threadId = "";
	}
}
