<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK;

class Assistants 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Cancels a run that is `in_progress`.
     * 
     * @param string $runId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\CancelRunResponse
     */
	public function cancelRun(
        string $runId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\CancelRunResponse
    {
        $request = new \Openai\SDK\Models\Operations\CancelRunRequest();
        $request->runId = $runId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs/{run_id}/cancel', \Openai\SDK\Models\Operations\CancelRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CancelRunResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an assistant with a model and instructions.
     * 
     * @param \Openai\SDK\Models\Shared\CreateAssistantRequest $request
     * @return \Openai\SDK\Models\Operations\CreateAssistantResponse
     */
	public function createAssistant(
        \Openai\SDK\Models\Shared\CreateAssistantRequest $request,
    ): \Openai\SDK\Models\Operations\CreateAssistantResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CreateAssistantResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assistantObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\AssistantObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     * 
     * @param \Openai\SDK\Models\Shared\CreateAssistantFileRequest $createAssistantFileRequest
     * @param string $assistantId
     * @return \Openai\SDK\Models\Operations\CreateAssistantFileResponse
     */
	public function createAssistantFile(
        \Openai\SDK\Models\Shared\CreateAssistantFileRequest $createAssistantFileRequest,
        string $assistantId,
    ): \Openai\SDK\Models\Operations\CreateAssistantFileResponse
    {
        $request = new \Openai\SDK\Models\Operations\CreateAssistantFileRequest();
        $request->createAssistantFileRequest = $createAssistantFileRequest;
        $request->assistantId = $assistantId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants/{assistant_id}/files', \Openai\SDK\Models\Operations\CreateAssistantFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAssistantFileRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CreateAssistantFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assistantFileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\AssistantFileObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a message.
     * 
     * @param \Openai\SDK\Models\Shared\CreateMessageRequest $createMessageRequest
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\CreateMessageResponse
     */
	public function createMessage(
        \Openai\SDK\Models\Shared\CreateMessageRequest $createMessageRequest,
        string $threadId,
    ): \Openai\SDK\Models\Operations\CreateMessageResponse
    {
        $request = new \Openai\SDK\Models\Operations\CreateMessageRequest();
        $request->createMessageRequest = $createMessageRequest;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/messages', \Openai\SDK\Models\Operations\CreateMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createMessageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CreateMessageResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\MessageObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a run.
     * 
     * @param \Openai\SDK\Models\Shared\CreateRunRequest $createRunRequest
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\CreateRunResponse
     */
	public function createRun(
        \Openai\SDK\Models\Shared\CreateRunRequest $createRunRequest,
        string $threadId,
    ): \Openai\SDK\Models\Operations\CreateRunResponse
    {
        $request = new \Openai\SDK\Models\Operations\CreateRunRequest();
        $request->createRunRequest = $createRunRequest;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs', \Openai\SDK\Models\Operations\CreateRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createRunRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CreateRunResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a thread.
     * 
     * @param \Openai\SDK\Models\Shared\CreateThreadRequest $request
     * @return \Openai\SDK\Models\Operations\CreateThreadResponse
     */
	public function createThread(
        ?\Openai\SDK\Models\Shared\CreateThreadRequest $request,
    ): \Openai\SDK\Models\Operations\CreateThreadResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CreateThreadResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threadObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ThreadObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a thread and run it in one request.
     * 
     * @param \Openai\SDK\Models\Shared\CreateThreadAndRunRequest $request
     * @return \Openai\SDK\Models\Operations\CreateThreadAndRunResponse
     */
	public function createThreadAndRun(
        \Openai\SDK\Models\Shared\CreateThreadAndRunRequest $request,
    ): \Openai\SDK\Models\Operations\CreateThreadAndRunResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/runs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\CreateThreadAndRunResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an assistant.
     * 
     * @param string $assistantId
     * @return \Openai\SDK\Models\Operations\DeleteAssistantResponse
     */
	public function deleteAssistant(
        string $assistantId,
    ): \Openai\SDK\Models\Operations\DeleteAssistantResponse
    {
        $request = new \Openai\SDK\Models\Operations\DeleteAssistantRequest();
        $request->assistantId = $assistantId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants/{assistant_id}', \Openai\SDK\Models\Operations\DeleteAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\DeleteAssistantResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAssistantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\DeleteAssistantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an assistant file.
     * 
     * @param string $assistantId
     * @param string $fileId
     * @return \Openai\SDK\Models\Operations\DeleteAssistantFileResponse
     */
	public function deleteAssistantFile(
        string $assistantId,
        string $fileId,
    ): \Openai\SDK\Models\Operations\DeleteAssistantFileResponse
    {
        $request = new \Openai\SDK\Models\Operations\DeleteAssistantFileRequest();
        $request->assistantId = $assistantId;
        $request->fileId = $fileId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants/{assistant_id}/files/{file_id}', \Openai\SDK\Models\Operations\DeleteAssistantFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\DeleteAssistantFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAssistantFileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\DeleteAssistantFileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a thread.
     * 
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\DeleteThreadResponse
     */
	public function deleteThread(
        string $threadId,
    ): \Openai\SDK\Models\Operations\DeleteThreadResponse
    {
        $request = new \Openai\SDK\Models\Operations\DeleteThreadRequest();
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}', \Openai\SDK\Models\Operations\DeleteThreadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\DeleteThreadResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteThreadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\DeleteThreadResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an assistant.
     * 
     * @param string $assistantId
     * @return \Openai\SDK\Models\Operations\GetAssistantResponse
     */
	public function getAssistant(
        string $assistantId,
    ): \Openai\SDK\Models\Operations\GetAssistantResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetAssistantRequest();
        $request->assistantId = $assistantId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants/{assistant_id}', \Openai\SDK\Models\Operations\GetAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetAssistantResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assistantObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\AssistantObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an AssistantFile.
     * 
     * @param string $assistantId
     * @param string $fileId
     * @return \Openai\SDK\Models\Operations\GetAssistantFileResponse
     */
	public function getAssistantFile(
        string $assistantId,
        string $fileId,
    ): \Openai\SDK\Models\Operations\GetAssistantFileResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetAssistantFileRequest();
        $request->assistantId = $assistantId;
        $request->fileId = $fileId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants/{assistant_id}/files/{file_id}', \Openai\SDK\Models\Operations\GetAssistantFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetAssistantFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assistantFileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\AssistantFileObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a message.
     * 
     * @param string $messageId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\GetMessageResponse
     */
	public function getMessage(
        string $messageId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\GetMessageResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetMessageRequest();
        $request->messageId = $messageId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/messages/{message_id}', \Openai\SDK\Models\Operations\GetMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetMessageResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\MessageObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a message file.
     * 
     * @param string $fileId
     * @param string $messageId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\GetMessageFileResponse
     */
	public function getMessageFile(
        string $fileId,
        string $messageId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\GetMessageFileResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetMessageFileRequest();
        $request->fileId = $fileId;
        $request->messageId = $messageId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/messages/{message_id}/files/{file_id}', \Openai\SDK\Models\Operations\GetMessageFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetMessageFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageFileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\MessageFileObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a run.
     * 
     * @param string $runId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\GetRunResponse
     */
	public function getRun(
        string $runId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\GetRunResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetRunRequest();
        $request->runId = $runId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs/{run_id}', \Openai\SDK\Models\Operations\GetRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetRunResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a run step.
     * 
     * @param string $runId
     * @param string $stepId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\GetRunStepResponse
     */
	public function getRunStep(
        string $runId,
        string $stepId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\GetRunStepResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetRunStepRequest();
        $request->runId = $runId;
        $request->stepId = $stepId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs/{run_id}/steps/{step_id}', \Openai\SDK\Models\Operations\GetRunStepRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetRunStepResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runStepObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunStepObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a thread.
     * 
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\GetThreadResponse
     */
	public function getThread(
        string $threadId,
    ): \Openai\SDK\Models\Operations\GetThreadResponse
    {
        $request = new \Openai\SDK\Models\Operations\GetThreadRequest();
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}', \Openai\SDK\Models\Operations\GetThreadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\GetThreadResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threadObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ThreadObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of assistant files.
     * 
     * @param \Openai\SDK\Models\Operations\ListAssistantFilesRequest $request
     * @return \Openai\SDK\Models\Operations\ListAssistantFilesResponse
     */
	public function listAssistantFiles(
        ?\Openai\SDK\Models\Operations\ListAssistantFilesRequest $request,
    ): \Openai\SDK\Models\Operations\ListAssistantFilesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants/{assistant_id}/files', \Openai\SDK\Models\Operations\ListAssistantFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListAssistantFilesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ListAssistantFilesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssistantFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListAssistantFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of assistants.
     * 
     * @param ?string $after
     * @param ?string $before
     * @param ?int $limit
     * @param ?\Openai\SDK\Models\Operations\QueryParamOrder $order
     * @return \Openai\SDK\Models\Operations\ListAssistantsResponse
     */
	public function listAssistants(
        ?string $after = null,
        ?string $before = null,
        ?int $limit = null,
        ?\Openai\SDK\Models\Operations\QueryParamOrder $order = null,
    ): \Openai\SDK\Models\Operations\ListAssistantsResponse
    {
        $request = new \Openai\SDK\Models\Operations\ListAssistantsRequest();
        $request->after = $after;
        $request->before = $before;
        $request->limit = $limit;
        $request->order = $order;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/assistants');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListAssistantsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ListAssistantsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssistantsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListAssistantsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of message files.
     * 
     * @param \Openai\SDK\Models\Operations\ListMessageFilesRequest $request
     * @return \Openai\SDK\Models\Operations\ListMessageFilesResponse
     */
	public function listMessageFiles(
        ?\Openai\SDK\Models\Operations\ListMessageFilesRequest $request,
    ): \Openai\SDK\Models\Operations\ListMessageFilesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/messages/{message_id}/files', \Openai\SDK\Models\Operations\ListMessageFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListMessageFilesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ListMessageFilesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMessageFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListMessageFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of messages for a given thread.
     * 
     * @param \Openai\SDK\Models\Operations\ListMessagesRequest $request
     * @return \Openai\SDK\Models\Operations\ListMessagesResponse
     */
	public function listMessages(
        ?\Openai\SDK\Models\Operations\ListMessagesRequest $request,
    ): \Openai\SDK\Models\Operations\ListMessagesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/messages', \Openai\SDK\Models\Operations\ListMessagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListMessagesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ListMessagesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListMessagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of run steps belonging to a run.
     * 
     * @param \Openai\SDK\Models\Operations\ListRunStepsRequest $request
     * @return \Openai\SDK\Models\Operations\ListRunStepsResponse
     */
	public function listRunSteps(
        ?\Openai\SDK\Models\Operations\ListRunStepsRequest $request,
    ): \Openai\SDK\Models\Operations\ListRunStepsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs/{run_id}/steps', \Openai\SDK\Models\Operations\ListRunStepsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListRunStepsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ListRunStepsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRunStepsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListRunStepsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of runs belonging to a thread.
     * 
     * @param \Openai\SDK\Models\Operations\ListRunsRequest $request
     * @return \Openai\SDK\Models\Operations\ListRunsResponse
     */
	public function listRuns(
        ?\Openai\SDK\Models\Operations\ListRunsRequest $request,
    ): \Openai\SDK\Models\Operations\ListRunsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs', \Openai\SDK\Models\Operations\ListRunsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListRunsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ListRunsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListRunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies a message.
     * 
     * @param \Openai\SDK\Models\Shared\ModifyMessageRequest $modifyMessageRequest
     * @param string $messageId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\ModifyMessageResponse
     */
	public function modifyMessage(
        \Openai\SDK\Models\Shared\ModifyMessageRequest $modifyMessageRequest,
        string $messageId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\ModifyMessageResponse
    {
        $request = new \Openai\SDK\Models\Operations\ModifyMessageRequest();
        $request->modifyMessageRequest = $modifyMessageRequest;
        $request->messageId = $messageId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/messages/{message_id}', \Openai\SDK\Models\Operations\ModifyMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyMessageRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ModifyMessageResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\MessageObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies a run.
     * 
     * @param \Openai\SDK\Models\Shared\ModifyRunRequest $modifyRunRequest
     * @param string $runId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\ModifyRunResponse
     */
	public function modifyRun(
        \Openai\SDK\Models\Shared\ModifyRunRequest $modifyRunRequest,
        string $runId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\ModifyRunResponse
    {
        $request = new \Openai\SDK\Models\Operations\ModifyRunRequest();
        $request->modifyRunRequest = $modifyRunRequest;
        $request->runId = $runId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs/{run_id}', \Openai\SDK\Models\Operations\ModifyRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyRunRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ModifyRunResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies a thread.
     * 
     * @param \Openai\SDK\Models\Shared\ModifyThreadRequest $modifyThreadRequest
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\ModifyThreadResponse
     */
	public function modifyThread(
        \Openai\SDK\Models\Shared\ModifyThreadRequest $modifyThreadRequest,
        string $threadId,
    ): \Openai\SDK\Models\Operations\ModifyThreadResponse
    {
        $request = new \Openai\SDK\Models\Operations\ModifyThreadRequest();
        $request->modifyThreadRequest = $modifyThreadRequest;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}', \Openai\SDK\Models\Operations\ModifyThreadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyThreadRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\ModifyThreadResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->threadObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ThreadObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
     * 
     * 
     * @param \Openai\SDK\Models\Shared\SubmitToolOutputsRunRequest $submitToolOutputsRunRequest
     * @param string $runId
     * @param string $threadId
     * @return \Openai\SDK\Models\Operations\SubmitToolOuputsToRunResponse
     */
	public function submitToolOuputsToRun(
        \Openai\SDK\Models\Shared\SubmitToolOutputsRunRequest $submitToolOutputsRunRequest,
        string $runId,
        string $threadId,
    ): \Openai\SDK\Models\Operations\SubmitToolOuputsToRunResponse
    {
        $request = new \Openai\SDK\Models\Operations\SubmitToolOuputsToRunRequest();
        $request->submitToolOutputsRunRequest = $submitToolOutputsRunRequest;
        $request->runId = $runId;
        $request->threadId = $threadId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs', \Openai\SDK\Models\Operations\SubmitToolOuputsToRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "submitToolOutputsRunRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Openai\SDK\Models\Operations\SubmitToolOuputsToRunResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->runObject = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\RunObject', 'json');
            }
        }

        return $response;
    }
}