<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK;

class Models 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
     * 
     * @param string $model
     * @return \Openai\SDK\Models\Operations\DeleteModelResponse
     */
	public function deleteModel(
        string $model,
    ): \Openai\SDK\Models\Operations\DeleteModelResponse
    {
        $request = new \Openai\SDK\Models\Operations\DeleteModelRequest();
        $request->model = $model;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/models/{model}', \Openai\SDK\Models\Operations\DeleteModelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\DeleteModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteModelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\DeleteModelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     * 
     * @return \Openai\SDK\Models\Operations\ListModelsResponse
     */
	public function listModels(
    ): \Openai\SDK\Models\Operations\ListModelsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/models');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\ListModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     * 
     * @param string $model
     * @return \Openai\SDK\Models\Operations\RetrieveModelResponse
     */
	public function retrieveModel(
        string $model,
    ): \Openai\SDK\Models\Operations\RetrieveModelResponse
    {
        $request = new \Openai\SDK\Models\Operations\RetrieveModelRequest();
        $request->model = $model;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/models/{model}', \Openai\SDK\Models\Operations\RetrieveModelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\RetrieveModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->model = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\Model', 'json');
            }
        }

        return $response;
    }
}