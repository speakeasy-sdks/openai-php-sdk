<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK;

class FineTuning 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Immediately cancel a fine-tune job.
     * 
     * 
     * @param string $fineTuningJobId
     * @return \Openai\SDK\Models\Operations\CancelFineTuningJobResponse
     */
	public function cancelFineTuningJob(
        string $fineTuningJobId,
    ): \Openai\SDK\Models\Operations\CancelFineTuningJobResponse
    {
        $request = new \Openai\SDK\Models\Operations\CancelFineTuningJobRequest();
        $request->fineTuningJobId = $fineTuningJobId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine_tuning/jobs/{fine_tuning_job_id}/cancel', \Openai\SDK\Models\Operations\CancelFineTuningJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\CancelFineTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTuningJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\FineTuningJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning)
     * 
     * 
     * @param \Openai\SDK\Models\Shared\CreateFineTuningJobRequest $request
     * @return \Openai\SDK\Models\Operations\CreateFineTuningJobResponse
     */
	public function createFineTuningJob(
        \Openai\SDK\Models\Shared\CreateFineTuningJobRequest $request,
    ): \Openai\SDK\Models\Operations\CreateFineTuningJobResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine_tuning/jobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\CreateFineTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTuningJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\FineTuningJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get status updates for a fine-tuning job.
     * 
     * 
     * @param string $fineTuningJobId
     * @param ?string $after
     * @param ?int $limit
     * @return \Openai\SDK\Models\Operations\ListFineTuningEventsResponse
     */
	public function listFineTuningEvents(
        string $fineTuningJobId,
        ?string $after = null,
        ?int $limit = null,
    ): \Openai\SDK\Models\Operations\ListFineTuningEventsResponse
    {
        $request = new \Openai\SDK\Models\Operations\ListFineTuningEventsRequest();
        $request->fineTuningJobId = $fineTuningJobId;
        $request->after = $after;
        $request->limit = $limit;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine_tuning/jobs/{fine_tuning_job_id}/events', \Openai\SDK\Models\Operations\ListFineTuningEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListFineTuningEventsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\ListFineTuningEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFineTuningJobEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListFineTuningJobEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List your organization's fine-tuning jobs
     * 
     * 
     * @param ?string $after
     * @param ?int $limit
     * @return \Openai\SDK\Models\Operations\ListPaginatedFineTuningJobsResponse
     */
	public function listPaginatedFineTuningJobs(
        ?string $after = null,
        ?int $limit = null,
    ): \Openai\SDK\Models\Operations\ListPaginatedFineTuningJobsResponse
    {
        $request = new \Openai\SDK\Models\Operations\ListPaginatedFineTuningJobsRequest();
        $request->after = $after;
        $request->limit = $limit;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine_tuning/jobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListPaginatedFineTuningJobsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\ListPaginatedFineTuningJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPaginatedFineTuningJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListPaginatedFineTuningJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get info about a fine-tuning job.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning)
     * 
     * 
     * @param string $fineTuningJobId
     * @return \Openai\SDK\Models\Operations\RetrieveFineTuningJobResponse
     */
	public function retrieveFineTuningJob(
        string $fineTuningJobId,
    ): \Openai\SDK\Models\Operations\RetrieveFineTuningJobResponse
    {
        $request = new \Openai\SDK\Models\Operations\RetrieveFineTuningJobRequest();
        $request->fineTuningJobId = $fineTuningJobId;
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine_tuning/jobs/{fine_tuning_job_id}', \Openai\SDK\Models\Operations\RetrieveFineTuningJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\RetrieveFineTuningJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTuningJob = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\FineTuningJob', 'json');
            }
        }

        return $response;
    }
}