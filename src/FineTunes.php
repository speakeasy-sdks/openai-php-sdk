<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Openai\SDK;

class FineTunes 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Immediately cancel a fine-tune job.
     * 
     * 
     * @param \Openai\SDK\Models\Operations\CancelFineTuneRequest $request
     * @return \Openai\SDK\Models\Operations\CancelFineTuneResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
	public function cancelFineTune(
        ?\Openai\SDK\Models\Operations\CancelFineTuneRequest $request,
    ): \Openai\SDK\Models\Operations\CancelFineTuneResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes/{fine_tune_id}/cancel', \Openai\SDK\Models\Operations\CancelFineTuneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\CancelFineTuneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTune = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\FineTune', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
     * 
     * 
     * @param \Openai\SDK\Models\Shared\CreateFineTuneRequest $request
     * @return \Openai\SDK\Models\Operations\CreateFineTuneResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
	public function createFineTune(
        \Openai\SDK\Models\Shared\CreateFineTuneRequest $request,
    ): \Openai\SDK\Models\Operations\CreateFineTuneResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\CreateFineTuneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTune = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\FineTune', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get fine-grained status updates for a fine-tune job.
     * 
     * 
     * @param \Openai\SDK\Models\Operations\ListFineTuneEventsRequest $request
     * @return \Openai\SDK\Models\Operations\ListFineTuneEventsResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
	public function listFineTuneEvents(
        ?\Openai\SDK\Models\Operations\ListFineTuneEventsRequest $request,
    ): \Openai\SDK\Models\Operations\ListFineTuneEventsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes/{fine_tune_id}/events', \Openai\SDK\Models\Operations\ListFineTuneEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Openai\SDK\Models\Operations\ListFineTuneEventsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\ListFineTuneEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFineTuneEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListFineTuneEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List your organization's fine-tuning jobs
     * 
     * 
     * @return \Openai\SDK\Models\Operations\ListFineTunesResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
	public function listFineTunes(
    ): \Openai\SDK\Models\Operations\ListFineTunesResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\ListFineTunesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFineTunesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\ListFineTunesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets info about the fine-tune job.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
     * 
     * 
     * @param \Openai\SDK\Models\Operations\RetrieveFineTuneRequest $request
     * @return \Openai\SDK\Models\Operations\RetrieveFineTuneResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
	public function retrieveFineTune(
        ?\Openai\SDK\Models\Operations\RetrieveFineTuneRequest $request,
    ): \Openai\SDK\Models\Operations\RetrieveFineTuneResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes/{fine_tune_id}', \Openai\SDK\Models\Operations\RetrieveFineTuneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \Openai\SDK\Models\Operations\RetrieveFineTuneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTune = $serializer->deserialize((string)$httpResponse->getBody(), 'Openai\SDK\Models\Shared\FineTune', 'json');
            }
        }

        return $response;
    }
}